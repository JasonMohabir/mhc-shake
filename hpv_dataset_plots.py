# -*- coding: utf-8 -*-
"""MHCflurry HPV Dataset_v2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cuY5LW-0qLtrjcxMljK2Q4bzAY_ULVpe
"""

pip install mhcflurry

#@title Mount Google Drive (You don't need to run this if you are running notebooks on your laptop)

from google.colab import drive

# The following command will prompt a URL for you to click and obtain the
# authorization code

drive.mount("/content/drive")

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
from pathlib import Path
import matplotlib.pyplot as plt
# %matplotlib inline

DATA = Path("/content/drive/My Drive/")

hpv_file = DATA / "hpv_predictions.csv"
hpv_data = pd.read_csv(hpv_file)

hpv_data.head()

import mhcflurry

!mhcflurry-downloads info

!mhcflurry-downloads fetch models_class1_selected_no_mass_spec
!mhcflurry-downloads fetch models_class1_trained_with_mass_spec 
!mhcflurry-downloads fetch models_class1

mhcflurry.Class1AffinityPredictor

predictor = mhcflurry.Class1AffinityPredictor.load("/root/.local/share/mhcflurry/4/1.4.0/models_class1/models")
predictor_no_ms = mhcflurry.Class1AffinityPredictor.load("/root/.local/share/mhcflurry/4/1.4.0/models_class1_selected_no_mass_spec/models")
predictor_train_ms = mhcflurry.Class1AffinityPredictor.load("/root/.local/share/mhcflurry/4/1.4.0/models_class1_trained_with_mass_spec/models")

pred_out = predictor.predict_to_dataframe(alleles=hpv_data.allele, peptides=hpv_data.peptide)
pred_no_ms_out = predictor_no_ms.predict_to_dataframe(alleles=hpv_data.allele, peptides=hpv_data.peptide)
pred_train_ms_out = predictor_train_ms.predict_to_dataframe(alleles=hpv_data.allele, peptides=hpv_data.peptide)

pred_no_ms_out

hpv_data.head()

# Calculates True Binding from Data 
hpv_hits = hpv_data["Binding Capacity"].copy()
hpv_hits = np.asarray(hpv_hits)
for idx, value in enumerate(hpv_hits):
  if value == "nb":
    hpv_hits[idx] = 0
  else:
    hpv_hits[idx] = 1

hpv_hits = hpv_hits.astype(int)

from scipy import stats

###########################################################################
# MHCFlurry 1.4.3
pred_value_1 = pred_out["prediction"].copy()
pred_value_1 = np.asarray(pred_value_1)
pred_value_1 = pred_value_1.astype(int)
###########################################################################
# MHCFlurry No MS 1.4.3
pred_value_2 = pred_no_ms_out["prediction"].copy()
pred_value_2 = np.asarray(pred_value_2)
pred_value_2 = pred_value_2.astype(int)
###########################################################################
# MHCFlurry Train MS 1.4.3
pred_value_3 = pred_train_ms_out["prediction"].copy()
pred_value_3 = np.asarray(pred_value_3)
pred_value_3 = pred_value_3.astype(int)
###########################################################################
# MHCFlurry 1.2.0
pred_value_4 = hpv_data["MHCflurry 1.2.0"].copy()
pred_value_4 = np.asarray(pred_value_4)
pred_value_4 = pred_value_4.astype(int)
###########################################################################
# MHCFlurry No MS 1.2.0
pred_value_5 = hpv_data["MHCflurry (no MS)"].copy()
pred_value_5 = np.asarray(pred_value_5)
pred_value_5 = pred_value_5.astype(int)
###########################################################################
# MHCFlurry Train MS 1.2.0
pred_value_6 = hpv_data["MHCflurry (train MS)"].copy()
pred_value_6 = np.asarray(pred_value_6)
pred_value_6 = pred_value_6.astype(int)
###########################################################################
# NETMHC
pred_value_7 = hpv_data["netmhc"].copy()
pred_value_7 = np.asarray(pred_value_7)
pred_value_7 = pred_value_7.astype(int)
###########################################################################
# NETMHCpan3
pred_value_8 = hpv_data["netmhcpan3"].copy()
pred_value_8 = np.asarray(pred_value_8)
pred_value_8 = pred_value_8.astype(int)
###########################################################################
# NETMHCpan4
pred_value_9 = hpv_data["netmhcpan4"].copy()
pred_value_9 = np.asarray(pred_value_9)
pred_value_9 = pred_value_9.astype(int)

x1 = pred_out.prediction
x2 = pred_no_ms_out.prediction
x3 = pred_train_ms_out.prediction

netmhc = hpv_data.netmhc
netmhcpan3 = hpv_data.netmhcpan3
netmhcpan4 = hpv_data.netmhcpan4

y = hpv_data.affinity

# Kendall Rank Correlation Coefficient
tau, pvalue_1 = stats.kendalltau(x1,y)
tau_no_ms, pvalue_2 = stats.kendalltau(x2, y)
tau_train_ms_out, pvalue_3 = stats.kendalltau(x3, y)
print(tau)
print(tau_no_ms)
print(tau_train_ms_out)

tau_netmhc, pvalue_4 = stats.kendalltau(netmhc,y)
tau_netmhcpan3, pvalue_5 = stats.kendalltau(netmhcpan3,y)
tau_netmhcpan4, pvalue_6 = stats.kendalltau(netmhcpan4,y)
print(tau_netmhc)
print(tau_netmhcpan3)
print(tau_netmhcpan4)

tau_old, pvalue_7 = stats.kendalltau(pred_value_6,y)
tau_no_ms_old, pvalue_8 = stats.kendalltau(pred_value_5,y)
tau_train_ms_old, pvalue_9 = stats.kendalltau(pred_value_4,y)
print(tau_old)
print(tau_no_ms_old)
print(tau_train_ms_old)

logx1 = np.log(x1).copy()
logx2 = np.log(x2).copy()
logx3 = np.log(x3).copy()

lognetmhc = np.log(netmhc).copy()
lognetmhcpan3 = np.log(netmhcpan3).copy()
lognetmhcpan4 = np.log(netmhcpan4).copy()

logx4 = np.log(pred_value_5).copy()
logx5 = np.log(pred_value_6).copy()
logx6 = np.log(pred_value_4).copy()

logy = np.log(y).copy()

# Pearson Correlation
pearson, pvalue_p_1 = stats.pearsonr(logx1, logy)
print(pearson)
pearson_no_ms, pvalue_p_2 = stats.pearsonr(logx2, logy)
print(pearson_no_ms)
pearson_train_ms, pvalue_p_3 = stats.pearsonr(logx3, logy)
print(pearson_train_ms)

pearson_netmhc, pvalue_p_4 = stats.pearsonr(lognetmhc, logy)
print(pearson_netmhc)
pearson_netmhcpan3, pvalue_p_5 = stats.pearsonr(lognetmhcpan3, logy)
print(pearson_netmhcpan3)
pearson_netmhcpan4, pvalue_p_6 = stats.pearsonr(lognetmhcpan4, logy)
print(pearson_netmhcpan4)

pearson_no_ms_old, pvalue_p_7 = stats.pearsonr(logx4, logy)
pearson_train_ms_old, pvalue_p_8 = stats.pearsonr(logx5, logy)
pearson_old, pvalue_p_9 = stats.pearsonr(logx6, logy)
print(pearson_netmhc)
print(pearson_netmhcpan3)
print(pearson_netmhcpan4)

import sklearn.metrics
import numpy
import scipy

y_true = (hpv_hits)

###########################################################################
# Area Under the Receiver Operator Characteristic Curve (AUC)
auc1 = sklearn.metrics.roc_auc_score(hpv_hits,~pred_value_1)
auc2 = sklearn.metrics.roc_auc_score(hpv_hits,~pred_value_2)
auc3 = sklearn.metrics.roc_auc_score(hpv_hits,~pred_value_3)
auc4 = sklearn.metrics.roc_auc_score(hpv_hits,~pred_value_4)
auc5 = sklearn.metrics.roc_auc_score(hpv_hits,~pred_value_5)
auc6 = sklearn.metrics.roc_auc_score(hpv_hits,~pred_value_6)
auc7 = sklearn.metrics.roc_auc_score(hpv_hits,~pred_value_7)
auc8 = sklearn.metrics.roc_auc_score(hpv_hits,~pred_value_8)
auc9 = sklearn.metrics.roc_auc_score(hpv_hits,~pred_value_9)

print(auc1)
print(auc2)
print(auc3)
print(auc4)
print(auc5)
print(auc6)
print(auc7)
print(auc8)
print(auc9)

import numpy as np
import matplotlib.pyplot as plt

# data to plot
n_groups = 3

# MHCflurry version 1.4.3
netmhc = (tau_netmhc, pearson_netmhc, auc7)
netmhcpan3 = (tau_netmhcpan3, pearson_netmhcpan3, auc8)
netmhcpan4 = (tau_netmhcpan4, pearson_netmhcpan4, auc9)
mhcflurry_no_ms = (tau_no_ms,pearson_no_ms,auc2)
mhcflurry_train_ms = (tau_train_ms_out, pearson_train_ms,auc3)
mhcflurry = (tau,pearson,auc1)

# MHCflurry version 1.2.0
mhcflurry_no_ms_old = (tau_no_ms_old, pearson_no_ms_old, auc5)
mhcflurry_train_ms_old = (tau_train_ms_old, pearson_train_ms_old, auc6)
mhcflurry_old = (tau_old, pearson_old, auc4)

# create plot
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.125
opacity = 0.8

rects1 = plt.bar(index, netmhc, bar_width,
alpha=opacity,
color='#4D8B66',
label='NetMHC 4.0')

rects2 = plt.bar(index + bar_width, netmhcpan3, bar_width,
alpha=opacity,
color='#AC511A',
label='NetMHCpan 3.0')

rects3 = plt.bar(index + 2*bar_width, netmhcpan4, bar_width,
alpha=opacity,
color='#B52177',
label='NetMHCpan 4.0')

rects4 = plt.bar(index + 3*bar_width, mhcflurry_no_ms, bar_width,
alpha=opacity,
color='#62599E',
label='MHCflurry (no MS) 1.4.3')

rects5 = plt.bar(index + 4*bar_width, mhcflurry_train_ms, bar_width,
alpha=opacity,
color='#699623',
label='MHCflurry (train-MS) 1.4.3')

rects6 = plt.bar(index + 5*bar_width, mhcflurry, bar_width,
alpha=opacity,
color='#C59D23',
label='MHCflurry 1.4.3')

plt.ylabel('Score')
plt.title('Benchmark Results: Scores by Test')
plt.xticks(index + bar_width, ('Kendall Test', 'Pearson r', 'AUC'))
plt.legend()

plt.tight_layout()
plt.show()

# data to plot
n_groups = 3

# create plot
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.125
opacity = 0.8

rects1 = plt.bar(index, mhcflurry_old, bar_width,
alpha=opacity,
color='#4D8B66',
label='v.1.2.0')

rects2 = plt.bar(index + bar_width, mhcflurry, bar_width,
alpha=opacity,
color='#C59D23',
label='v.1.4.3')

rects3 = plt.bar(index + 2*bar_width, mhcflurry_no_ms_old, bar_width,
alpha=opacity,
color='#62599E',
label='v.1.2.0 (no MS)')

rects4 = plt.bar(index + 3*bar_width, mhcflurry_no_ms, bar_width,
alpha=opacity,
color='#AC511A',
label='v.1.4.3 (no MS)')

rects5 = plt.bar(index + 4*bar_width, mhcflurry_train_ms_old, bar_width,
alpha=opacity,
color='#B52177',
label='v.1.2.0 (train-MS)')

rects6 = plt.bar(index + 5*bar_width, mhcflurry_train_ms, bar_width,
alpha=opacity,
color='#699623',
label='v.1.4.3 (train MS)')

plt.ylabel('Score')
plt.title('Comparison of Different MHCflurry Versions')
plt.xticks(index + bar_width, ('Kendall Test', 'Pearson r', 'AUC'))
plt.legend()

plt.tight_layout()
plt.show()

